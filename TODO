Add unit test for model selection 
Add unit test for cross-validation

Add variable selection to classify() summary
  Include variable selection options in summary.
    Example:
      var_select = "ANOVA" 
      q = 30

Fix issue with error_cv
  The error returned for each fold is the proportion of misclassified.
  When these are summarized, the proportions are averaged.
  However, this reported number is incorrect when the fold count is imbalanced.
  Example: N = 31, k = 5. First 6 folds have 5 test obs, but last has one.

Add function that automatically partitions a data set into K random splits and preprocesses each split.
	The idea here is to store as much preprocessing as possible for each split.
		Example: Say I want to apply a variable selection method to each training set
		within each split. For each classifier that I consider, I do not want to have to repeat this process,
		so I'd like to store the selected features by split.

Implement error_apparent()
Implement error_boot()
Implement error_632()
Implement error_632plus()

Add option to generate training/test data from a function (e.g. MVN data)
  Use an iterator to make repeated calls to this function
  Repeat this B times

Add the option to save results as other types.
  classify(..., results = c("list", "mysql", "data.frame"), ...)
  To do this, write these helper functions:
    results_as_data.frame()
    results_as_db()

Start building a wiki as documentation for classify

Add preprocessing options
  Normalize data
  Dimension reduction
  Others?

Store and show results for model selection
  Plot error rates as a function of tuning parameters.

Add diagnostic tools so that test observations that are continually
misclassified can be identified.
  Ex.: Bar graph with proportions that each observation is misclassified.

Consider adding an option to store classifiers in a temporary file
  Perhaps through 'ff' or 'bigmemory'
  So that classifiers with large covariance matrices, for ex, do not
    overwhelm the user's memory, in order to prevent excessive memory
    usage, namely virtual memory.
